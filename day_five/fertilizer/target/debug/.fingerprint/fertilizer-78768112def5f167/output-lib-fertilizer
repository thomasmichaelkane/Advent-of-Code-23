{"message":"field `mtype` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\lib.rs","byte_start":1094,"byte_end":1097,"line_start":53,"line_end":53,"column_start":8,"column_end":11,"is_primary":false,"text":[{"text":"struct Map {","highlight_start":8,"highlight_end":11}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lib.rs","byte_start":1105,"byte_end":1110,"line_start":54,"line_end":54,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    mtype: MapType,","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Map` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: field `mtype` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lib.rs:54:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct Map {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mtype: MapType,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `Map` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"message":"function `store_seeds` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\lib.rs","byte_start":2268,"byte_end":2279,"line_start":101,"line_end":101,"column_start":4,"column_end":15,"is_primary":true,"text":[{"text":"fn store_seeds(line: String) -> Vec<u32> {","highlight_start":4,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: function `store_seeds` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lib.rs:101:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn store_seeds(line: String) -> Vec<u32> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"for loop over an `Option`. This is more readably written as an `if let` statement","code":{"code":"for_loops_over_fallibles","explanation":null},"level":"warning","spans":[{"file_name":"src\\lib.rs","byte_start":6342,"byte_end":6369,"line_start":226,"line_end":226,"column_start":29,"column_end":56,"is_primary":true,"text":[{"text":"                for maps in all_maps.get_mut(&map_type) {","highlight_start":29,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(for_loops_over_fallibles)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to check pattern in a loop use `while let`","code":null,"level":"help","spans":[{"file_name":"src\\lib.rs","byte_start":6330,"byte_end":6334,"line_start":226,"line_end":226,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"                for maps in all_maps.get_mut(&map_type) {","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":"while let Some(","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\lib.rs","byte_start":6330,"byte_end":6736,"line_start":226,"line_end":237,"column_start":17,"column_end":18,"is_primary":false,"text":[{"text":"                for maps in all_maps.get_mut(&map_type) {","highlight_start":17,"highlight_end":58},{"text":"                    for map in maps {","highlight_start":1,"highlight_end":38},{"text":"                        let correct_map = map.check_map(&var);","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        if correct_map {","highlight_start":1,"highlight_end":41},{"text":"                            var = map.convert(var);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // println!(\"Step {}\", var);","highlight_start":1,"highlight_end":57},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\lib.rs","byte_start":6338,"byte_end":6342,"line_start":226,"line_end":226,"column_start":25,"column_end":29,"is_primary":true,"text":[{"text":"                for maps in all_maps.get_mut(&map_type) {","highlight_start":25,"highlight_end":29}],"label":null,"suggested_replacement":") = ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"consider using `if let` to clear intent","code":null,"level":"help","spans":[{"file_name":"src\\lib.rs","byte_start":6330,"byte_end":6334,"line_start":226,"line_end":226,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"                for maps in all_maps.get_mut(&map_type) {","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":"if let Some(","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\lib.rs","byte_start":6330,"byte_end":6736,"line_start":226,"line_end":237,"column_start":17,"column_end":18,"is_primary":false,"text":[{"text":"                for maps in all_maps.get_mut(&map_type) {","highlight_start":17,"highlight_end":58},{"text":"                    for map in maps {","highlight_start":1,"highlight_end":38},{"text":"                        let correct_map = map.check_map(&var);","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        if correct_map {","highlight_start":1,"highlight_end":41},{"text":"                            var = map.convert(var);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // println!(\"Step {}\", var);","highlight_start":1,"highlight_end":57},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\lib.rs","byte_start":6338,"byte_end":6342,"line_start":226,"line_end":226,"column_start":25,"column_end":29,"is_primary":true,"text":[{"text":"                for maps in all_maps.get_mut(&map_type) {","highlight_start":25,"highlight_end":29}],"label":null,"suggested_replacement":") = ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: for loop over an `Option`. This is more readably written as an `if let` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lib.rs:226:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                for maps in all_maps.get_mut(&map_type) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(for_loops_over_fallibles)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: to check pattern in a loop use `while let`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10mwhile let Some(\u001b[0m\u001b[0mmaps\u001b[0m\u001b[0m\u001b[38;5;10m) = \u001b[0m\u001b[0mall_maps.get_mut(&map_type) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10m~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using `if let` to clear intent\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10mif let Some(\u001b[0m\u001b[0mmaps\u001b[0m\u001b[0m\u001b[38;5;10m) = \u001b[0m\u001b[0mall_maps.get_mut(&map_type) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10m~~~\u001b[0m\n\n"}
{"message":"3 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: 3 warnings emitted\u001b[0m\n\n"}
